// utils.ts

import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

// Utility: Classnames + Tailwind merge
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

const dictionary: Record<string, string> = {
  // === AI & Tech ===
  "ai": "ŸÖÿµŸÜŸàÿπ€å ÿ∞€ÅÿßŸÜÿ™",
  "artificial": "ŸÖÿµŸÜŸàÿπ€å",
  "intelligence": "ÿ∞€ÅÿßŸÜÿ™",
  "usability": "ŸÇÿßÿ®ŸÑ ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ€åÿ™",
  "boundaries": "ÿ≠ÿØŸàÿØ",
  "canvas": "⁄©€åŸÜŸàÿ≥",
  "upgrade": "ÿßŸæ ⁄Øÿ±€å⁄à",
  "users": "ÿµÿßÿ±ŸÅ€åŸÜ",
  "interact": "ÿ™ÿπÿßŸÖŸÑ",
  "productivity": "⁄©ÿßÿ±⁄©ÿ±ÿØ⁄Ø€å",
  "coding": "⁄©Ÿà⁄àŸÜ⁄Ø",
  "content": "ŸÖŸàÿßÿØ",
  "generation": "ÿ™ÿÆŸÑ€åŸÇ",
  "brainstorming": "ÿÆ€åÿßŸÑÿßÿ™ ⁄©€í ÿ™ÿ®ÿßÿØŸÑ€í",
  "feature": "ÿÆÿµŸàÿµ€åÿ™",
  "visual": "ÿ®ÿµÿ±€å",
  "interactive": "ÿ™ÿπÿßŸÖŸÑ€å",
  "workspace": "Ÿàÿ±⁄© ÿßÿ≥Ÿæ€åÿ≥",
  "structured": "ÿ≥ÿßÿÆÿ™€å",
  "draggable": "ŸÇÿßÿ®ŸÑ ÿ≠ÿ±⁄©ÿ™",
  "thought": "ÿÆ€åÿßŸÑ",
  "maps": "ŸÜŸÇÿ¥€í",
  "tool": "ÿßŸàÿ≤ÿßÿ±",
  "help": "ŸÖÿØÿØ ⁄©ÿ±ŸÜÿß",
  "think": "ÿ≥Ÿà⁄ÜŸÜÿß",
  "space": "ÿ¨⁄Ø€Å",
  "words": "ÿßŸÑŸÅÿßÿ∏",
  "rollout": "ÿ±ŸàŸÑ ÿ¢ÿ§Ÿπ",
  "subscribers": "ÿ≥ÿ®ÿ≥⁄©ÿ±ÿßÿ¶ÿ®ÿ±ÿ≤",
  "devices": "ÿ¢ŸÑÿßÿ™",
  "mobile": "ŸÖŸàÿ®ÿßÿ¶ŸÑ",
  "app": "ÿß€åŸæ",
  "website": "Ÿà€åÿ® ÿ≥ÿßÿ¶Ÿπ",
  "dynamic": "ŸÖÿ™ÿ≠ÿ±⁄©",
  "interface": "ÿßŸÜŸπÿ±ŸÅ€åÿ≥",
  "manipulate": "ÿ¨Ÿà⁄ëŸÜ€í",
  "building": "ÿπŸÖÿßÿ±ÿ™",
  "blocks": "ÿ®ŸÑÿß⁄©ÿ≥",
  "dragging": "⁄©⁄æ€åŸÜ⁄ÜŸÜÿß",
  "organizing": "ÿ™ÿ±ÿ™€åÿ® ÿØ€åŸÜÿß",
  "expanding": "ÿ®⁄ë⁄æÿßŸÜÿß",
  "branching": "ÿ¥ÿßÿÆŸà⁄∫ ŸÖ€å⁄∫ ÿ™ŸÇÿ≥€åŸÖ",
  "ideas": "ÿÆ€åÿßŸÑÿßÿ™",
  "spatial": "ŸÖ⁄©ÿßŸÜ€å",
  "environment": "ŸÖÿßÿ≠ŸàŸÑ",
  "co-pilot": "⁄©Ÿà-Ÿæÿßÿ¶ŸÑŸπ",

  // === General ===
  "your": "ÿ¢Ÿæ ⁄©ÿß",
  "partner": "ÿ≥ÿßÿ™⁄æ€å",
  "digital": "⁄à€åÿ¨€åŸπŸÑ",
  "transformation": "ÿ™ÿ®ÿØ€åŸÑ€å",
  "reserved": "ŸÖÿ≠ŸÅŸàÿ∏",
  "once": "ÿß€å⁄© ÿ®ÿßÿ±",
  "again": "ÿØŸàÿ®ÿßÿ±€Å",
  "major": "ÿ®⁄ëÿß",
  "way": "ÿ∑ÿ±€åŸÇ€Å",
  "millions": "ŸÑÿß⁄©⁄æŸà⁄∫",
  "daily": "ÿ±Ÿàÿ≤ÿßŸÜ€Å",
  "according": "⁄©€í ŸÖÿ∑ÿßÿ®ŸÇ",
  "designed": "⁄à€åÿ≤ÿßÿ¶ŸÜ ⁄©€åÿß ⁄Ø€åÿß",
  "gradually": "ÿ¢€Åÿ≥ÿ™€Å ÿ¢€Åÿ≥ÿ™€Å",
  "including": "ÿ®ÿ¥ŸÖŸàŸÑ",
  "essentially": "ÿ®ŸÜ€åÿßÿØ€å ÿ∑Ÿàÿ± Ÿæÿ±",
  "turns": "ÿ™ÿ®ÿØ€åŸÑ ⁄©ÿ±ÿ™ÿß €Å€í",
  "into": "ŸÖ€å⁄∫",
  "for": "⁄©€í ŸÑ€å€í",
  "with": "⁄©€í ÿ≥ÿßÿ™⁄æ",
  "of": "⁄©ÿß",
  "to": "ÿ™⁄©",
  "in": "ŸÖ€å⁄∫",
  "on": "Ÿæÿ±",
  "at": "Ÿæÿ±",
  "by": "⁄©€í ÿ∞ÿ±€åÿπ€Å",
  "is": "€Å€í",
  "are": "€Å€å⁄∫",
  "be": "€ÅŸàŸÜÿß",
  "can": "ÿ≥⁄©ÿ™ÿß €Å€í",
  "will": "€ÅŸà⁄Øÿß",
  "not": "ŸÜ€Å€å⁄∫",
  "just": "ÿµÿ±ŸÅ",
  "and": "ÿßŸàÿ±",
  "or": "€åÿß",
  "but": "ŸÑ€å⁄©ŸÜ",
  "this": "€å€Å",
  "that": "Ÿà€Å",
  "it": "€å€Å",
  "as": "ÿ®ÿ∑Ÿàÿ±",
  "a": "ÿß€å⁄©",
  "an": "ÿß€å⁄©",
  "the": "ÿØ€å",
  "has": "€Å€í",
  "have": "€Å€í",
  "been": "ÿ±€Åÿß €Å€í",
  "was": "ÿ™⁄æÿß",
  "were": "ÿ™⁄æ€í",
  "had": "ÿ™⁄æÿß",
  "does": "⁄©ÿ±ÿ™ÿß €Å€í",
  "did": "⁄©€åÿß",
  "done": "⁄©€åÿß ⁄Ø€åÿß",
  "make": "ÿ®ŸÜÿßŸÜÿß",
  "made": "ÿ®ŸÜÿß€åÿß ⁄Ø€åÿß",
  "creating": "ÿ®ŸÜÿßŸÜÿß",
  "created": "ÿ®ŸÜÿß€åÿß ⁄Ø€åÿß"
};


// üîÅ Smart English ‚Üí Urdu Translator
export function translateToUrdu(text: string): string {
  return text
    .split(/\s+/)
    .map((word) => {
      const trimmed = word.toLowerCase().replace(/[.,!?;:()"'‚Äú‚Äù]/g, "");
      const translated = dictionary[trimmed];
      return translated ? word.replace(new RegExp(trimmed, "i"), translated) : word;
    })
    .join(" ");
}

// ‚úÖ Supabase (lazy loaded)
import { createClient } from "@supabase/supabase-js";

let supabase: ReturnType<typeof createClient> | null = null;

function getSupabaseClient() {
  if (!supabase) {
    if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY) {
      throw new Error("Missing Supabase environment variables.");
    }
    supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
  }
  return supabase;
}

export async function saveToSupabase(summary: string) {
  const client = getSupabaseClient();
  await client.from("summaries").insert([{ summary }]);
}


export function getWordCount(text: string): number {
  return text.trim().split(/\s+/).filter(Boolean).length;
}

const hashtagMap: Record<string, string[]> = {
  ai: ["#AI", "#ArtificialIntelligence", "#MachineLearning", "#AIFuture"],
  tech: ["#Tech", "#Innovation", "#FutureIsNow", "#DigitalWorld"],
  music: ["#Music", "#PopCulture", "#NowPlaying", "#MusicLovers"],
  taylor: ["#TaylorSwift", "#Swifties", "#ErasTour", "#SpeakNow"],
  sabrina: ["#SabrinaCarpenter", "#FeatherEra", "#PopPrincess", "#GirlPower"],
  climate: ["#ClimateCrisis", "#Sustainability", "#EcoAwareness", "#ActNow"],
  ethics: ["#AIethics", "#ResponsibleTech", "#BiasInAI", "#MoralTech"],
  generation: ["#GenZ", "#Millennials", "#VoiceOfAGeneration", "#CultureShift"],
};

export function generateHashtags(text: string): string[] {
  const keywords = Object.keys(hashtagMap);
  const lowerText = text.toLowerCase();

  const hashtags = new Set<string>();

  for (const key of keywords) {
    if (lowerText.includes(key)) {
      hashtagMap[key].forEach((tag) => hashtags.add(tag));
    }
  }

  if (hashtags.size === 0) {
    hashtags.add("#BlogEssence");
    hashtags.add("#AI");
    hashtags.add("#GeneratedSummary");
  }

  return Array.from(hashtags).slice(0, 6); // limit to 6
}
